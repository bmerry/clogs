<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<!--
   Copyright (c) 2012-2014 University of Cape Town
   Copyright (c) 2014, 2015, 2018 Bruce Merry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
-->
<book>
    <title>CLOGS User Manual</title>
    <bookinfo>
        <author>
            <firstname>Bruce</firstname>
            <surname>Merry</surname>
            <email>bmerry@users.sourceforge.net</email>
        </author>
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <holder>University of Cape Town</holder>
        </copyright>
        <copyright>
            <year>2014</year>
            <year>2015</year>
            <year>2018</year>
            <holder>Bruce Merry</holder>
        </copyright>
        <!-- The releaseinfo element is replaced by the stylesheet to inject
             the version number -->
        <releaseinfo>
        </releaseinfo>
    </bookinfo>
    <chapter id="introduction">
        <title>Introduction</title>
        <para>
            CLOGS is a library for higher-level operations on top of the OpenCL
            C++ API. It is designed to integrate with other OpenCL code, including
            synchronization using OpenCL events.
        </para>
        <para>
            Currently only three operations are supported: radix sorting, reduction, and
            exclusive scan. Radix sort supports all the unsigned
            integral types as keys, and all the built-in scalar and vector
            types suitable for storage in buffers as values. Scan supports
            all the integral types. It also supports vector types, which
            allows for limited multi-scan capabilities. Reduction supports all
            the built-in types, but the floating-point types are not tested.
        </para>
    </chapter>
    <chapter id="installation">
        <title>Installation</title>
        <section id="installation.requirements">
            <title>Requirements</title>
            <para>
                At present CLOGS is only supported with GCC and Clang on
                GNU/Linux. It has also been used with Visual C++ on Windows,
                but the author no longer has a Windows installation and so it
                is unknown if it still works (if it doesn't, you can submit a
                patch). The code for the library
                itself is portable, but some aspects of the build system and
                test suite require porting.
            </para>
            <para>
                It has been tested on an NVIDIA GeForce 480 GTX, an AMD R9 270
                and on a CPU using the AMD APP SDK. The Intel SDK for OpenCL
                Applications is not supported as it has numerous bugs. Other
                OpenCL implementations are expected to work, but they are
                untested and unlikely to have optimal performance.
            </para>
            <para>
                The following dependencies are required to build CLOGS. Where a
                minimum version is given, this is just the minimum version that
                is tested; older versions may still work.
            </para>
            <itemizedlist>
                <listitem><para>
                        An OpenCL implementation and headers, including a recent
                        version of <filename type="header">CL/cl.hpp</filename>.
                        If you have compilation problems, it might be that your
                        vendor SDK is providing an old version. You can
                        download the latest from the <ulink
                            url="http://www.khronos.org/registry/cl">registry</ulink>. Note
                        that you should use the version for the latest version of OpenCL
                        (currently 1.2), even if you are targeting an older
                        OpenCL version.
                </para></listitem>
                <listitem><para>
                        A C++ compiler supporting C++11. GCC 4.8 and Visual C++
                        2013 have been tested. The public interface does not
                        rely on any C++11 features, so it might not be
                        necessary to build against clogs in C++11 mode,
                        although ABI changes in classes like std::string may
                        cause issues.
                </para></listitem>
                <listitem><para>
                        The Boost headers. No dynamic libraries are needed to
                        use the CLOGS library, but the
                        <application>boost::program_options</application>
                        library is needed for the CLOGS test suite and
                        benchmark application. Boost headers are only
                        required when building the library, not when building
                        code against it.
                </para></listitem>
                <listitem><para>
                        <application>Doxygen</application> is required to
                        build the reference documentation (optional).
                </para></listitem>
                <listitem><para>
                        <application>xsltproc</application> is required to
                        build the user manual (optional). It is best to also
                        install the DocBook XSL stylesheets so that they will
                        be sourced locally rather than from the internet,
                        which can be extremely slow.
                </para></listitem>
                <listitem><para>
                        <application>Python</application> 2.7.
                </para></listitem>
                <listitem><para>
                        <application>CppUnit</application> is required to
                        build and run the test suite (optional).
                </para></listitem>
            </itemizedlist>
        </section>
        <section id="Compiling">
            <title>Compiling CLOGS</title>
            <para>
                CLOGS uses the <ulink
                    url="waf.googlecode.com/svn/docs/wafbook/single.html">waf</ulink>
                build system. The build system is included in the
                distribution, so you do not need to download it separately.
            </para>
            <para>
                The first step is to configure the build. This is done by
                running
            </para>
            <screen><prompt>$ </prompt><userinput>python waf configure</userinput></screen>
            <para>
                This will check that the necessary headers can be found.
                OpenCL headers are not always installed in the normal include
                paths. You can explicitly specify the location for them by
                running
            </para>
            <screen><prompt>$ </prompt><userinput>python waf configure --cl-headers=<replaceable>path</replaceable></userinput></screen>
            <para>
                Note that <filename
                    class="directory"><replaceable>path</replaceable></filename> should
                be the directory containing the <filename class="directory">CL</filename>
                directory. If other libraries also need to be added to the
                include or link paths, you should use compiler-specific
                environment variables, such as <envar>INCLUDE</envar> and
                <envar>LIBPATH</envar> for MSVC or <envar>CPATH</envar> and
                <envar>LIBRARY_PATH</envar> for GCC.
            </para>
            <para>
                You can control where CLOGS will be installed by using
                <option>--prefix</option>, as well as the other standard
                <application>autoconf</application> options (run <userinput>waf
                    --help</userinput> for a list).
            </para>
            <para>
                The configuration will automatically detect whether
                <application>doxygen</application> and
                <application>xsltproc</application> are present. However, you
                can disable them with <option>--without-doxygen</option> and
                <option>--without-xsltproc</option>.
            </para>
            <para>
                If you need to debug into CLOGS, you can pass
                <option>--variant=debug</option> at configuration time to
                create a debug build, or <option>--variant=optimized</option>
                to create an optimized build with debug symbols.
            </para>
        </section>
        <section id="installation.install">
            <title>Installing CLOGS</title>
            <para>
                Installation is done by running <userinput>python waf
                    install</userinput>. Unless you have changed the
                installation directory, you will probably need to be root to do
                this, and you will also need to run
                <userinput>ldconfig</userinput> afterwards on a GNU system.
            </para>
            <para>
                <application>waf</application> also supports a
                <option>--destdir</option> option that allows the entire
                directory tree to be placed into a subdirectory rather than
                the root of the filesystem. This is intended for use with
                package management tools.
            </para>
        </section>
        <section id="installation.tune">
            <title>Autotuning</title>
            <para>
                CLOGS uses autotuning to choose good tuning parameters for each
                device. In previous versions of CLOGS one had to run a separate
                <command>clogs-tune</command> command to do autotuning in
                advance, but current versions do autotuning on-demand.
            </para>
            <para>
                On UNIX-like systems, the results of autotuning are stored in
                <filename><envar>$HOME</envar>/.cache/clogs/cache.sqlite</filename>
                by default. On Windows, they are stored in the local
                application data directory. You can override the setting by
                setting <envar>CLOGS_CACHE_DIR</envar>, or on UNIX-like systems
                by setting <envar>XDG_CACHE_HOME</envar>. You can delete this
                database to force retuning, or to clean out stale tuning
                results (for example, for older versions of drivers) that are
                taking up space.
            </para>
        </section>
    </chapter>

    <chapter id="using">
        <title>Using CLOGS</title>
        <section id="using.example">
            <title>Examples</title>
            <para>
                We start with a simple example showing how to do a scan
                (prefix sum) operation. This operation is typically
                combined with an algorithm that produces a variable amount of
                output per work item, to allocate positions in an output
                buffer. In a first pass, each work-item writes the number of
                output elements to a buffer, which we'll call
                <varname>counts</varname>. A prefix sum is then run over
                <varname>counts</varname>, which replaces each value with
                the sum of all values strictly before it.  The second pass of
                the algorithm then uses the values in
                <varname>counts</varname> as the initial positions to start
                writing output to another buffer.
            </para>
            <para>
                In the sample code, we assume that an OpenCL context, device and
                command queue have already been created using the C++
                bindings, and that the <varname>counts</varname> array has
                already been written.
            </para>
            <programlisting language="c++">
#include &lt;clogs/clogs.h&gt;
...
clogs::ScanProblem problem;
problem.setType(clogs::TYPE_UINT);
clogs::Scan scanner(context, device, problem);
...
scanner.enqueue(queue, inBuffer, outBuffer, numElements);</programlisting>
            <para>
                The above code starts by specifying the variation of the
                algorithm: in this case, the type of elements to scan will be
                <type>cl_uint</type>. It then creates an object (<varname>scanner</varname>)
                that can be used to
                perform scans. The constructor handles loading of the
                internal kernels and allocation of internal storage. These
                objects are quite slow to create and should be reused where
                possible.
            </para>
            <para>
                The last line enqueues to <varname>queue</varname> the kernel
                launches needed to perform the scan. There are several
                optional parameters we have not shown. These include a vector
                of events to wait for, and an output parameter which returns
                an event that is signaled when the scan is complete. These
                work in the same way as the other enqueuing functions in
                the OpenCL C++ API, and allow scans to be combined with other
                kernel launches in a dependency graph.
            </para>
            <para>
                This is an out-of-place scan, where the output is stored
                separately from the input. It is also possible to a scan
                in-place by passing the same value for both buffers.
            </para>
            <para>
                Now let us look at a slightly more complex sorting example.
                Suppose we have unsigned 20-bit keys (stored in
                <type>uint</type>s), and <type>float4</type>
                values. In CLOGS, keys and values must be held in separate
                buffers (which reduces overall bandwidth), so let us say that
                keys are in <varname>keys</varname> and values in
                <varname>values</varname>. Furthermore, let us suppose that the
                vector <varname>wait</varname> contains a list of events for
                work that will generate the keys and values, and that we want
                an event that will be signaled when the sort is complete. Then
                the code we want is
            </para>
            <programlisting language="c++">
#include &lt;clogs/clogs.h&gt;
...
clogs::RadixsortProblem problem;
problem.setKeyType(clogs::TYPE_UINT);
problem.setValueType(clogs::Type(clogs::TYPE_FLOAT, 4));
clogs::Radixsort sorter(context, device, problem);
sorter.enqueue(queue, keys, values, numElements, 20, &amp;wait, &amp;event);
</programlisting>
            <para>
                Notice that we used <type>clogs::Type</type> to specify the
                type of the values. This is a C++ type that encodes an OpenCL
                built-in type. In this case we specified the base type
                (<type>float</type>) and vector length (4). We could also do
                this for the key type, but it was not necessarily since there
                is an implicit conversion from
                <symbol>clogs::TYPE_UINT</symbol> to <type>clogs::Type</type>.
            </para>
            <para>
                Also notice that we explicitly specified how many bits are
                used in the key. This parameter is optional (passing zero
                is the same as not passing it), but specifying it may reduce
                the number of passes and hence improve performance.
            </para>
            <para>
                Both of the classes we have covered so far have additional
                features, which are described in the reference manual.
            </para>
        </section>
        <section id="using.benchmark">
            <title>Benchmark application</title>
            <para>
                For a complete example of using the API, refer to
                <filename>tools/clogs-benchmark.cpp</filename>, which is a tool
                for benchmarking the performance of CLOGS. This tool
                is also installed when you install CLOGS, so you can obtain
                estimates of sorting performance from the command-line.
            </para>
        </section>
        <section id="using.reentrance">
            <title>Reentrance</title>
            <para>
                The classes in this API (<type>clogs::Scan</type>,
                <type>clogs::Reduce</type> and
                <type>clogs::Radixsort</type>) store internal state that is
                used by the enqueued work. There are two limitations on
                reentrance:
            </para>
            <orderedlist>
                <listitem><para>
                        It is not safe for two host threads to call the
                        <function>enqueue</function> method on the same object
                        at the same time.
                </para></listitem>
                <listitem><para>
                        It is not safe for the work enqueued by two calls to
                        <function>enqueue</function> on the same object to be
                        executed at the same time. Thus, if two calls specify
                        different command queues or specify the same queue but
                        it is in out-of-order execution mode, then events
                        or other synchronization primitives need to be used to
                        ensure that the work does not overlap.
                </para></listitem>
            </orderedlist>
        </section>
        <section id="using.nobindings">
            <title>Avoiding the OpenCL C++ bindings</title>
            <para>
                The examples all show the interfaces using the classes defined
                in the OpenCL C++ bindings, such as
                <type>cl::CommandQueue</type>. However, interfaces are also
                provided that use the plain C bindings e.g.,
                <type>cl_command_queue</type>. Using the C bindings may be very
                slightly faster (on the CPU) since it avoids some extra
                reference counting.
            </para>
        </section>
        <section id="using.errors">
            <title>Error handling</title>
            <para>
                Errors are reported exclusively via exceptions. OpenCL errors
                are reported with exceptions of type
                <type>clogs::Error</type>. If
                <symbol>__CL_ENABLE_EXCEPTIONS</symbol> is defined, then this
                is a typedef of <type>cl::Error</type>; otherwise, it is a
                type with the same interface, which inherits from
                <type>std::runtime_error</type>. Additionally, the reference
                documentation lists some higher-level conditions which
                will be signaled by throwing <type>clogs::Error</type> (for
                example, if <replaceable>numElements</replaceable> was
                too large and would have overflowed the buffer).
            </para>
            <para>
                Out-of-memory conditions may be reported either with
                <type>clogs::Error</type> (if it is the OpenCL implementation
                that failed to allocate memory) or
                <type>std::bad_alloc</type> (if it is CLOGS that fails to
                allocate memory).
            </para>
            <para>
                The other type of exception that may occur is
                <type>clogs::InternalError</type>. This is only thrown for
                unexpected errors with the implementation, such as when
                the source for one of the kernels fails to compile. Errors
                related to the tuning cache are reported as
                <type>clogs::CacheError</type> (a subclass of
                <type>clogs::InternalError</type>).
            </para>
        </section>
        <section id="using.memory">
            <title>Memory management</title>
            <para>
                Each object allocated through the API allocates a small
                amount of OpenCL memory, whose size depends only on the arguments to
                the constructor. Additionally, <type>clogs::Radixsort</type>
                allocates temporary buffers as part of
                <function>enqueue</function> to hold partially-sorted copies
                of the keys and values.
            </para>
            <para>
                For some uses, it is desirable to avoid repeatedly allocating
                and freeing these temporary buffers, and so it is possible for
                the user to specify buffers to use by calling
                <function>setTemporaryBuffers</function> (see the reference
                documentation for details).
            </para>
            <para>
                The algorithm objects are non-copyable, to avoid
                accidently triggering expensive copies of OpenCL objects.
                However, they are default-constructible, swappable, and
                moveable.
            </para>
        </section>
        <section id="using.profile">
            <title>Profiling</title>
            <para>
                The event returned by the various <function>enqueue</function>
                commands is suitable for event ordering, but it does not work
                well with OpenCL event profiling functions to determine how much
                time is spent on the GPU. For this purpose, one should call
                <function>setEventCallback</function> on the
                <type>clogs::Radixsort</type> or similar
                object. The registered callback will be called once for each
                CL command enqueued, passing the associated event. Note that
                the callback is called during the <function>enqueue</function>
                call, rather than when the event completes; it is up to you to
                defer querying the profiling information until the event is
                complete.
            </para>
        </section>
        <section id="using.tunepolicy">
            <title>Tuning policy</title>
            <para>
                By default, tuning progress is reported to standard output. In some
                cases one might want to redirect the output (for example, to a log
                file) or suppress it entirely. One can control the output stream
                and the verbosity using a <type>clogs::TunePolicy</type>. Here is
                an example:
            </para>
            <programlisting language="c++">
#include &lt;clogs/clogs.h&gt;
...
clogs::TunePolicy policy;
policy.setOutput(std::cerr);
policy.setVerbosity(clogs::TUNE_VERBOSITY_TERSE);
clogs::RadixsortProblem problem;
problem.setTunePolicy(policy);
...
</programlisting>
            <para>
                Refer to the reference manual for the possible verbosity
                levels. If more control is required over how the progress
                report is handled, you can implement a custom output stream
                type (Boost.Iostreams greatly simplifies this).
            </para>
            <para>
                It is also possible to disable on-the-fly tuning, by calling
                <function>setEnable</function> on the policy. If the problem
                configuration has not already been tuned, attempting to
                construct the algorithm object will throw a
                <type>clogs::CacheError</type> instead of doing tuning.
            </para>
        </section>
    </chapter>

    <chapter id="performance">
        <title>Performance</title>
        <para>
            While the code is heavily optimized, CLOGS has had relatively
            little device-specific performance tuning. The radix sort
            has been tuned on NVIDIA Fermi and GCN architectures, and the scan
            has only be tuned on Fermi. It is not yet as fast as some CUDA
            implementations. The graph below gives an indication of sorting
            rates. Note that the Y axis is the rate, not the
            time: it needs a <emphasis>lot</emphasis> of input to achieve maximum
            throughput.
        </para>
        <informalfigure>
            <mediaobject>
                <imageobject>
                    <imagedata format="SVG" fileref="clogs-benchmark.svg"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
    </chapter>

    <chapter id="license">
        <title>License</title>
        <para>
            Copyright (c) 2012-2014 University of Cape Town
            Copyright (c) 2014, 2015, 2018 Bruce Merry
        </para>
        <para>
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
        </para>
        <para>
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
        </para>
        <para>
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.
        </para>
        <section>
            <title>SQLite 3</title>
            <para>
                This software includes SQLite 3.8.5, which is in the public
                domain. For details, refer to the <ulink
                    url="http://sqlite.org/copyright.html">website</ulink>.
            </para>
        </section>
    </chapter>
</book>
